#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Mai

* Installing Emacs

On OS X, [[http://brew.sh/][homebrew]] is an easy way to install emacs.

- ~--cocoa~ :: installs emacs with the OS X GUI version
- ~--with-imagemagick~ :: installs emacs with imagemagick support

#+begin_src sh
  brew install emacs --cocoa --with-imagemagick
#+end_src
 
* Theme

#+begin_src emacs-lisp
  (use-package cyberpunk-theme
               :ensure t
               :init
               (progn
                 (set-face-attribute `mode-line nil
                                     :box nil)
                 (set-face-attribute `mode-line-inactive nil
                                     :box nil)))
#+end_src

* Sane defaults

Let's start with some sane defaults, shall we?

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)
#+end_src

* Buffer listings

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
  ;; make ibuffer the default buffer lister.
  (defalias 'list-buffers 'ibuffer)
#+end_src


source: http://ergoemacs.org/emacs/emacs_buffer_management.html

* Magit

#+begin_src emacs-lisp
  (use-package magit
               :ensure t)
#+end_src

Use an easy keybinding to access magit and set up the emacsclient so
that the commit messages don't go crazy.

#+begin_src emacs-lisp
  ;; define key for magit-status
  (global-set-key "\C-cg" 'magit-status)

  ;; emacs client for magit
  (setq magit-emacsclient-executable "/usr/local/Cellar/emacs/24.4/bin/emacsclient")
#+end_src

The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.

[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
  ;; full screen magit-status

  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+end_src

* Ace Jump Mode

A quick way to jump around the buffer.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
  (use-package ace-jump-mode
               :ensure t
               :commands ace-jump-mode
               :init
               (bind-key "C-S-s" 'ace-jump-mode))
#+end_src

* Recentf

#+begin_src emacs-lisp
  (use-package recentf-mode
               :init
               (progn
                 (setq recent-max-saved-items 100)
                 
                 (defun ido-recentf-open ()
                   "Use `ido-completing-read' to \\[find-file] a recent file"
                   (interactive)
                   (if (find-file (ido-completing-read "Find recent file: " recentf-list))
                       (message "Opening file...")
                     (message "Aborting")))

                 (bind-key "C-x C-r" 'ido-recentf-open)))
#+end_src

* Markdown mode

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\.markdown\\'" . markdown-mode)
           ("\\.md\\'"       . markdown-mode)))
#+end_src

* Helm

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :config (progn
              (require 'helm-config)
              (use-package helm-projectile :ensure t)
              (setq helm-locate-command "mdfind %s %s")))
#+end_src

* Org mode

** Org babel languages

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . t)
     (calc . t)
     (latex . t)
     (java . t)
     (ruby . t)
     (scheme . t)
     (sh . t)))

  (defun my-org-confirm-babel-evaluate (lang body)
    (not (or (string= lang "C")
             (string= lang "java")
             (string= lang "python")
             (string= lang "emacs-lisp"))))  ; don't ask for c, java, or python
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src


** Org babel/source blocks

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-src-strip-leading-and-trailing-blank-lines t)
#+end_src

* Expand region

#+begin_src emacs-lisp
  (use-package expand-region
               :ensure t
               :bind ("C-@" . er/expand-region))
#+end_src

* Multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->"         . mc/mark-next-line-like-this)
           ("C-<"         . mc/mark-previous-like-this)
           ("C-c C-<"     . mc/mark-all-like-this)))
#+end_src

* Visual-regexp

#+begin_src emacs-lisp
  (use-package visual-regexp
               :ensure t
               :init
               (use-package visual-regexp-steroids :ensure t)
               :bind (("C-c r" . vr/replace)
                      ("C-c q" . vr/query-replace)
                      ("C-c m" . vr/mc-mark) ; Need multiple cursors
                      ("C-M-r" . vr/isearch-backward)
                      ("C-M-s" . vr/isearch-forward)))
#+end_src

* Tramp

#+begin_src emacs-lisp
  (use-package tramp)
#+end_src

* Smartparens mode

#+begin_src emacs-lisp
  (use-package smartparens
               :ensure t
               :diminish smartparens
               :config (require 'smartparens-config))
#+end_src

* Locate

Using OS X Spotlight within Emacs by modifying the ~locate~ function.

I usually use the 

#+begin_src emacs-lisp
  ;; mdfind is the command line interface to Spotlight
  (setq locate-command "mdfind")
#+end_src

* Dash

Integration with Dash, the API documentation browser on OS X.

#+begin_src emacs-lisp
  (use-package dash-at-point
    :ensure t
    :bind (("C-c a d" . dash-at-point)
           ("C-c e"   . dash-at-point-with-docset)))
#+end_src

* Mac-specific settings

#+begin_src emacs-lisp
  ; Don't use Lion-style fullscreen
  (setq ns-use-native-fullscreen nil)

  ; delete files by moving them to the OS X trash
  (setq delete-by-moving-to-trash t)

  ; path to the OS X system trash
  (setq trash-directory "~/.Trash")

  ;; use srgb colors because they're better
  (setq ns-use-srgb-colorspace t)
#+end_src

** Keys

#+begin_src emacs-lisp
  ; Use Command-` to switch between Emacs windows (not frames)
  (global-set-key (kbd "s-`") 'other-window)
  ; Use Command-Shift-` to switch Emacs frames in reverse
  (global-set-key (kbd "s-~") (lambda() () (interactive) (other-window -1)))

  ; Because I changed the key bindings above, set one for 'other-frame
  (global-set-key (kbd "s-1") 'other-frame)

  ; Fullscreen!
  (global-set-key [(super return)] 'toggle-frame-fullscreen)

  ; buffer switching
  (global-set-key [(super {)] 'previous-buffer)
  (global-set-key [(super })] 'next-buffer)

  ; open file
  (global-set-key [(super o)] 'find-file)

  ; set a key for 'compile
  (global-set-key (kbd "H-c") 'compile)

  ; set a key binding to run 'recompile
  ; it will run the most recent command for 'compile
  (global-set-key (kbd "H-r") 'recompile)

  ; set the Fn key as the hyper key
  (setq ns-function-modifier 'hyper)

  ; disable the key that minimizes emacs to the dock
  (global-unset-key (kbd "C-z"))

  ; open a new finder window for the current file
  (global-set-key [(super /)] '(lambda () (interactive) (shell-command "open .")))
#+end_src

* Shell

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x m") 'shell)
  (global-set-key (kbd "C-x M") 'ansi-term)
#+end_src

* Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t)
#+end_src

* Skewer mode

#+begin_src emacs-lisp
  (use-package skewer-mode
    :ensure t
    :config (skewer-setup))
#+end_src